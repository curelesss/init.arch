- name: Arch Init Playbook
  gather_facts: no
  hosts: localhost
  vars:
      source_key: "ssh/id_rsa"
      dest_key: "{{ lookup('env', 'HOME') }}/.ssh/id_rsa"

  tasks:
    
    - name: Check Mirror List Backup File <pacman.mirror>
      stat:
        path: /etc/pacman.d/mirrorlist.backup
      register: mirrorlist_backup
      tags:
        - pacman
        - pacman.mirror

    - name: Backup Mirror list <pacman.mirror>
      become: yes
      copy:
        src: /etc/pacman.d/mirrorlist
        dest: /etc/pacman.d/mirrorlist.backup
      when: not mirrorlist_backup.stat.exists
      tags:
        - pacman
        - pacman.mirror
      
    - name: Add Aliyun Mirror if NOT exists <pacman.mirror>
      become: yes
      lineinfile:
        path: /etc/pacman.d/mirrorlist
        line: "Server = https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch"
        insertbefore: BOF 
        state: present
      tags:
        - pacman
        - pacman.mirror

    - name: Update pacman.conf - Color <pacman.conf>
      become: yes
      replace:
        path: /etc/pacman.conf
        regexp: '^#Color'
        replace: 'Color'
      tags:
        - pacman
        - pacman.conf

    - name: Update pacman.conf - ParallelDownload <pacman.conf>
      become: yes
      replace:
        path: /etc/pacman.conf
        regexp: '^#ParallelDownloads = 5'
        replace: 'ParallelDownloads = 5'
      tags:
        - pacman
        - pacman.conf

    - name: Update pacman.conf - VerbosePkgLists <pacman.conf>
      become: yes
      replace:
        path: /etc/pacman.conf
        regexp: '^#VerbosePkgLists'
        replace: 'VerbosePkgLists'
      tags:
        - pacman
        - pacman.conf

    - name: Update pacman.conf - ILoveCandy <pacman.conf>
      become: yes
      lineinfile:
        path: /etc/pacman.conf
        line: "ILoveCandy"
        insertafter: "# Misc options"
        state: present
      tags:
        - pacman
        - pacman.conf

    - name: Update pamcam.conf - [multilib] <pacman.conf>
      become: yes
      replace:
        path: /etc/pacman.conf
        regexp: "^#\\[multilib\\]\\n#Include = /etc/pacman.d/mirrorlist"
        replace: "[multilib]\nInclude = /etc/pacman.d/mirrorlist"
      tags:
        - pacman
        - pacman.conf

    - name: Pacman Update & Upgrade <pacman.upgrade>
      become: yes
      pacman:
        update_cache: yes
        upgrade: yes
      tags:
        - pacman
        - pacman.upgrade

    - name: Install Font Config <font>
      become: yes
      pacman:
        name: fontconfig
        state: present
      tags:
        - font

    - name: Install Noto Font <font>
      become: yes
      pacman:
        name: noto-fonts
        state: present
      tags:
        - font

    - name: Install Noto CJK Font <font>
      become: yes
      pacman:
        name: noto-fonts-cjk
        state: present
      tags:
        - font

    - name: Install Noto Emoji Font <font>
      become: yes
      pacman:
        name: noto-fonts-emoji
        state: present
      tags:
        - font

    - name: Install Noto Extra Font <font>
      become: yes
      pacman:
        name: noto-fonts-extra
        state: present
      tags:
        - font

    - name: Install Sauce Code Pro Neard Font <font>
      become: yes
      pacman:
        name: ttf-sourcecodepro-nerd
        state: present
      tags:
        - font

    - name: Install JetBrains Neard Font <font>
      become: yes
      pacman:
        name: ttf-jetbrains-mono-nerd
        state: present
      tags:
        - font
          
    - name: Install Cantarell Fonts <fonts>
      become: yes
      pacman:
        name: cantarell-fonts
        state: present
      tags:
        - font

    - name: Install Nerd Fonts Hack
      become: yes
      pacman:
        name: ttf-hack-nerd
        state: present
      tags:
        - font

    - name: Install Firefox <browser>
      become: yes
      pacman:
        name: firefox
        state: present
      tags:
        - browser

    - name: git user.email <git> <github>
      git_config:
        name: user.email
        scope: global
        value: "curelesss@gmail.com"
      tags:
        - git
        - github

    - name: git user.name <git> <github>
      git_config:
        name: user.name
        scope: global
        value: "curelesss"
      tags:
        - git
        - github

    - name: Ensure .ssh directory exists <ssh> <github>
      file:
        dest: "{{ dest_key | dirname }}"
        mode: 0700
        state: directory
      tags:
        - ssh
        - github

    - name: Install ssh key <ssh> <github>
      copy:
        src: "{{ source_key }}"
        dest: "{{ dest_key }}"
        mode: 0600
      tags:
        - ssh
        - github

    - name: Install git config <ssh> <github>
      ansible.builtin.command:
        cmd: cp ssh/config "{{ lookup('env', 'HOME') }}/.ssh/"
      tags:
        - ssh
        - github

    - name: Install openssh <ssh>
      become: yes
      pacman:
        name: openssh
        state: present
      tags:
        - ssh
        - github

    - name: Set Grub to Output System Loading Info <grub>
      become: yes
      ansible.builtin.replace:
        path: /etc/default/grub
        regexp: '^(\s*)GRUB_CMDLINE_LINUX_DEFAULT=.*$'
        replace: '\1GRUB_CMDLINE_LINUX_DEFAULT=""'
      tags:
        - grub

    - name: Update GRUB configuration <grub>
      become: yes
      ansible.builtin.command:
        cmd: grub-mkconfig -o /boot/grub/grub.cfg
      tags:
        - grub
          
    - name: Clone Yay <yay>
      git:
        repo: https://aur.archlinux.org/yay-bin.git
        dest: "~/yay"
        update: true
      tags:
        - yay

    - name: Build and Install Yay <yay>
      command:
        chdir: "~/yay"
        cmd: "makepkg -sfi --noconfirm"
        creates: /usr/bin/yay
      tags:
        - yay

    - name: Install Ansible Galaxy Package kewlfft for Yay tasks <yay.ansible>
      command: ansible-galaxy collection install kewlfft.aur
      tags:
        - yay
        - yay.ansible

    - name: Create the `aur_builder` user <yay.ansible>
      become: yes
      ansible.builtin.user:
        name: aur_builder
        create_home: yes
        group: wheel
      tags:
        - yay
        - yay.ansible

    - name: Allow the `aur_builder` user to run `sudo pacman` without a password <yay.ansible>
      become: yes
      ansible.builtin.lineinfile:
        path: /etc/sudoers.d/11-install-aur_builder
        line: 'aur_builder ALL=(ALL) NOPASSWD: /usr/bin/pacman'
        create: yes
        mode: 0644
        validate: 'visudo -cf %s'
      tags:
        - yay
        - yay.ansible
          
    - name: Install Emacs <dotfile.emacs>
      become: yes
      pacman:
        name: emacs
        state: present
      tags:
        - dotfile
        - dotfile.emacs
          
    - name: Install Neovim <dotfile.neovim>
      become: yes
      pacman:
        name: neovim
        state: present
      tags:
        - dotfile
        - dotfile.neovim

    - name: Check fonts directory
      stat:
        path: ~/.local/share/fonts/
      register: fonts_folder
      tags:
        - font

    - name: Clone .fonts
      git:
        repo: git@github.com:curelesss/.fonts.git
        dest: "~/.local/share/fonts/"
      when: fonts_folder.stat.exists == False
      tags:
        - font

    - name: refresh font cache
      command: fc-cache -fv
      tags:
        - font

    - name: Check .emacs.d directory
      stat:
        path: ~/.emacs.d
      register: emacs_folder
      tags:
        - dotfile

    - name: Clone .emacs.d repository <dotfile.clone.emacs>
      git:
        repo: git@github.com:curelesss/.emacs.d.git
        dest: "~/.emacs.d"
      when: emacs_folder.stat.exists == False
      tags:
        - dotfile
        - dotfile.clone
        - dotfile.clone.emacs

    - name: Check .dotfiles directory
      stat:
        path: ~/.dotfiles
      register: dotfiles_folder
      tags:
        - dotfile

    - name: Clone .dotfiles repository <dotfile.clone.dotfiles>
      git:
        repo: git@github.com:curelesss/.dotfiles.git
        dest: "~/.dotfiles"
      when: dotfiles_folder.stat.exists == False
      tags:
        - dotfile
        - dotfile.clone
        - dotfile.clone.dotfiles

    - name: Install Neovim Configuration <dotfile.neovim.cfg>
      command: emacs --batch --eval "(require 'org)" --eval '(org-babel-tangle-file "~/.dotfiles/neovim.org")'
      tags:
        - dotfile
        - dotfile.neovim
        - dotfile.neovim.cfg

    - name: Launch Emacs to tangle dotfiles <dotfile.prepare>
      command: emacs
      tags:
        - test

